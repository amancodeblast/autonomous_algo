// Generated by gencpp from file perception/Object.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MESSAGE_OBJECT_H
#define PERCEPTION_MESSAGE_OBJECT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace perception
{
template <class ContainerAllocator>
struct Object_
{
  typedef Object_<ContainerAllocator> Type;

  Object_()
    : header()
    , id(0)
    , label()
    , class_num(0)
    , score(0.0)
    , xmin(0)
    , ymin(0)
    , xmax(0)
    , ymax(0)  {
    }
  Object_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , label(_alloc)
    , class_num(0)
    , score(0.0)
    , xmin(0)
    , ymin(0)
    , xmax(0)
    , ymax(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _label_type;
  _label_type label;

   typedef int32_t _class_num_type;
  _class_num_type class_num;

   typedef float _score_type;
  _score_type score;

   typedef int32_t _xmin_type;
  _xmin_type xmin;

   typedef int32_t _ymin_type;
  _ymin_type ymin;

   typedef int32_t _xmax_type;
  _xmax_type xmax;

   typedef int32_t _ymax_type;
  _ymax_type ymax;





  typedef boost::shared_ptr< ::perception::Object_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception::Object_<ContainerAllocator> const> ConstPtr;

}; // struct Object_

typedef ::perception::Object_<std::allocator<void> > Object;

typedef boost::shared_ptr< ::perception::Object > ObjectPtr;
typedef boost::shared_ptr< ::perception::Object const> ObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception::Object_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception::Object_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::perception::Object_<ContainerAllocator1> & lhs, const ::perception::Object_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.label == rhs.label &&
    lhs.class_num == rhs.class_num &&
    lhs.score == rhs.score &&
    lhs.xmin == rhs.xmin &&
    lhs.ymin == rhs.ymin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymax == rhs.ymax;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::perception::Object_<ContainerAllocator1> & lhs, const ::perception::Object_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace perception

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::perception::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception::Object_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception::Object_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception::Object_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception::Object_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception::Object_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "49dce74e1d117448f821a4b639562a8e";
  }

  static const char* value(const ::perception::Object_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x49dce74e1d117448ULL;
  static const uint64_t static_value2 = 0xf821a4b639562a8eULL;
};

template<class ContainerAllocator>
struct DataType< ::perception::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception/Object";
  }

  static const char* value(const ::perception::Object_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception::Object_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header                 header\n"
"uint32                          id\n"
"string                          label\n"
"int32                           class_num\n"
"float32                         score   #Score as defined by the detection, Optional\n"
"############### 2D Rect\n"
"int32                           xmin           # X coord in image space(pixel) of the initial point of the Rect\n"
"int32                           ymin           # Y coord in image space(pixel) of the initial point of the Rect\n"
"int32                           xmax       # Width of the Rect in pixels\n"
"int32                           ymax      # Height of the Rect in pixels\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::perception::Object_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception::Object_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.label);
      stream.next(m.class_num);
      stream.next(m.score);
      stream.next(m.xmin);
      stream.next(m.ymin);
      stream.next(m.xmax);
      stream.next(m.ymax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Object_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception::Object_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception::Object_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.label);
    s << indent << "class_num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.class_num);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
    s << indent << "xmin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.xmin);
    s << indent << "ymin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ymin);
    s << indent << "xmax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ymax);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MESSAGE_OBJECT_H
